stages:
  # - build # Not used for python code
  - test
  - provision_dev
  - configure_dev
  - provision_staging
  - configure_staging
  - provision_deploy
  - configure_deploy

before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apk add openssh-client )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

# Check python syntax
code_quality:
  stage: test
  image: chrissayon/flask_ansible:0.3
  script:
    - cd backend
    - flake8 --max-line-length=90 --exclude ansible

# Unit testing
unit_testing:
  stage: test
  image: chrissayon/flask_ansible:0.3
  script:
    - python3 -m pytest backend/tests

# Deploy dev server
provision_dev_server:
  stage: provision_dev
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script: aws cloudformation deploy --stack-name dev --template cloudformation/dev.yml
  environment:
    name: development
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^feature/'
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: on_success

# Configure dev server
configure_dev:
  stage: configure_dev
  image: chrissayon/flask_ansible:0.3
  script:
    - cd ansible
    - aws ec2 describe-instances --query "Reservations[*].Instances[*].[PublicIpAddress, Tags[?Key=='dev_server']]" --output=text | grep -v None >> inventory
    - cat inventory
    - ansible-playbook -i inventory main.yml
  environment:
    name: development
  when: on_success

# Deploy staging server
deploy_staging:
  stage: provision_staging
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script: aws cloudformation deploy --stack-name staging --template cloudformation/stage.yml
  when: manual
  environment:
    name: staging
  only:
  - staging

# Deploy prod server
deploy_prod:
  stage: provision_deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script: aws cloudformation deploy --stack-name prod --template cloudformation/prod.yml
  when: manual
  environment:
    name: production
  only:
  - master
